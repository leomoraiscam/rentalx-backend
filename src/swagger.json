{
  "openapi": "3.0.0",
  "info": {
    "title": "Car rentals API - Swagger Documentation",
    "description": "This is API Car Rental",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "host": "http://localhost:3333/api-docs"
  },
  "schemes": ["http"],
  "servers": [
    {
      "url": "http://localhost:3333",
      "description": "Development local environment API"
    }
  ],
  "tags": [
    {
      "name": "accounts",
      "description": "Endpoints related to accounts management"
    },
    {
      "name": "sessions",
      "description": "Endpoints for user authentication"
    },
    {
      "name": "password",
      "description": "Endpoints for reset passwords and send password recovery emails"
    },
    {
      "name": "categories",
      "description": "Endpoints related to car categories management"
    },
    {
      "name": "specifications",
      "description": "Endpoints related to car specifications management"
    },
    {
      "name": "cars",
      "description": "Endpoints related to cars management"
    },
    {
      "name": "rentals",
      "description": "Endpoints related to car rentals management"
    }
  ],
  "paths": {
    "/accounts": {
      "post": {
        "tags": ["accounts"],
        "summary": "Create a new account",
        "description": "This endpoint allows the creation of a new account",
        "operationId": "addAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the account resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/avatar": {
      "patch": {
        "tags": ["accounts"],
        "summary": "Upload avatar image to account",
        "description": "This endpoint allows you to upload image to a specific account",
        "operationId": "uploadAvatar",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadAvatar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the uploaded avatar to account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/me": {
      "get": {
        "tags": ["accounts"],
        "summary": "show the profile of the logged in user",
        "description": "This endpoint allows logged in to see your profile",
        "operationId": "showProfile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "This response will be returned when list of car categories with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": ["sessions"],
        "summary": "Authenticate user",
        "description": "This endpoint allows users to log with their credentials",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the user was authenticated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "424": {
            "description": "This response will be returned when some dependencies or some secrets key is missing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedDependencyError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/refresh-token": {
      "post": {
        "tags": ["sessions"],
        "summary": "Crate a new refresh token",
        "description": "This endpoint allows users to create a new refresh token",
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the user was authenticated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "424": {
            "description": "This response will be returned when some dependencies or some secrets key is missing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedDependencyError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/forgot": {
      "post": {
        "tags": ["password"],
        "summary": "Send password recovery email",
        "description": "This endpoint allows users to request a password recovery email",
        "operationId": "sendForgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the email was send with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/reset": {
      "post": {
        "tags": ["password"],
        "summary": "Reset user password",
        "description": "This endpoint allows users to reset their passwords",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "token obtained via password reset email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "default": "6ec808b3-13f0-4cb7-bf91-ac8609a3205c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the password was reseted with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": ["categories"],
        "summary": "Create a new category",
        "description": "This endpoint allows admin users to create new categories",
        "operationId": "addCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a category resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the category resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["categories"],
        "summary": "List of car categories",
        "description": "This endpoint allows admin users to list of car categories",
        "operationId": "listCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "PerPage values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order (ASC or DESC) values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of car categories with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponse"
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/categories/import": {
      "post": {
        "tags": ["categories"],
        "summary": "Upload car categories from CSV",
        "description": "Allows admin users to upload car categories in bulk from a CSV file",
        "operationId": "uploadCategories",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCSV"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a category resource"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/specifications": {
      "post": {
        "tags": ["specifications"],
        "summary": "Create a new specification",
        "description": "This endpoint allows admin users to create new specifications",
        "operationId": "addSpecification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Specification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a specification resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the specification resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["specifications"],
        "summary": "List of car specifications",
        "description": "This endpoint allows admin users to list of car specifications",
        "operationId": "listSpecifications",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "PerPage values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order (ASC or DESC) values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of car specifications with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificationListResponse"
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/specifications/import": {
      "post": {
        "tags": ["specifications"],
        "summary": "Upload car specifications from CSV",
        "description": "Allows admin users to upload car specifications in bulk from a CSV file",
        "operationId": "uploadSpecifications",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCSV"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a specification resource"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/cars": {
      "post": {
        "tags": ["cars"],
        "summary": "Create a new car",
        "description": "This endpoint allows admin users to create new car",
        "operationId": "addCar",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a car resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the car resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["cars"],
        "summary": "List categories with car models",
        "description": "This endpoint returns a list of categories with grouped models cars",
        "operationId": "listCategoriesWithCarsModels",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Expected start date for rent to begin",
            "required": true,
            "schema": {
              "type": "string",
              "default": "2024-09-25 08:00:00"
            }
          },
          {
            "name": "expectedReturnDate",
            "in": "query",
            "description": "Expected end date for rent to end",
            "required": true,
            "schema": {
              "type": "string",
              "default": "2024-09-25 18:00:00"
            }
          },
          {
            "name": "brand",
            "in": "query",
            "description": "Brand values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "bmw"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "sport"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Categories values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "7f9240a4-6669-4ca2-8d32-1aec40b0e00a,b53066b3-03fa-4540-a50b-82089f752062"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of categories with grouped models cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoriesWithModelsListResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/cars/options": {
      "get": {
        "tags": ["cars"],
        "summary": "List of car models according to specific category",
        "description": "This endpoint returns a list of cars with models in the specified category",
        "operationId": "listCarsGroupedByCategory",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Expected start date for rent to begin",
            "required": true,
            "schema": {
              "type": "string",
              "default": "2024-09-25 08:00:00"
            }
          },
          {
            "name": "expectedReturnDate",
            "in": "query",
            "description": "Expected end date for rent to end",
            "required": true,
            "schema": {
              "type": "string",
              "default": "2024-09-25 18:00:00"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Categories values ​​to be considered for filter",
            "required": true,
            "schema": {
              "type": "string",
              "default": "7f9240a4-6669-4ca2-8d32-1aec40b0e00a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when the list of car models is grouped by the specific category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarsGroupedByCategoryListResponse"
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}/images": {
      "post": {
        "tags": ["cars"],
        "summary": "Upload images to a car",
        "description": "This endpoint allows admin users upload images to a car",
        "operationId": "uploadImagesCar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Car ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadImages"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a image resource to the car"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the car has been deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals": {
      "post": {
        "tags": ["rentals"],
        "summary": "Create a new rental",
        "description": "This endpoint allows users to creation of a rental",
        "operationId": "addRental",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rental"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a rental resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the car to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when some fields did not came the way we needed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["rentals"],
        "summary": "List rentals",
        "description": "This endpoint allows admin users to list the rentals",
        "operationId": "listRentals",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "PerPage values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "10"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order (ASC or DESC) values to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "DESC"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "status values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "CONFIRMED,PICKED_UP"
            }
          },
          {
            "name": "categoryIds",
            "in": "query",
            "description": "categories values ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "7f9240a4-6669-4ca2-8d32-1aec40b0e00a"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date value ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2024-09-10"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date value ​​to be considered for filter",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2024-09-30"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of rentals with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalsListResponse"
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals/me": {
      "get": {
        "tags": ["rentals"],
        "summary": "List their rental history",
        "description": "This endpoint allows users to list their rental history",
        "operationId": "listMeRentals",
        "responses": {
          "200": {
            "description": "This response will be returned when list of rentals with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeRentalsListResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "This response will be returned when the empty data to this entity"
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals/{id}": {
      "get": {
        "tags": ["rentals"],
        "summary": "list rental according to specific id",
        "description": "This endpoint allows users to list an rental",
        "operationId": "listRentalById",
        "responses": {
          "200": {
            "description": "This response will be returned when the rental show with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailRentalResponse"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the rental to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["rentals"],
        "summary": "Update an rental",
        "description": "This endpoint allows users to update information for an existing lease",
        "operationId": "updateRental",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRental"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the updated a rental resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRentalResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the car to be deleted does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when some fields did not came the way we needed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals/{id}/devolution": {
      "put": {
        "tags": ["rentals"],
        "summary": "Devolution an rental car",
        "description": "This endpoint allows users to devolution of a rental",
        "operationId": "devolutionRental",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Car ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when the updated a rental resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevolutionRentalResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the rental to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when rental isn`t eligible for devolution",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals/{id}/pickup": {
      "put": {
        "tags": ["rentals"],
        "summary": "Start an rental",
        "description": "This endpoint allows admin users to picked-up an rental to user",
        "operationId": "pickedUpRental",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Rental ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "This response will be returned when the updated a rental resource"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the rental to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when rental isn`t eligible for picked up",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/rentals/{id}/cancel": {
      "put": {
        "tags": ["rentals"],
        "summary": "Cancel an rental",
        "description": "This endpoint allows users to cancel an rental",
        "operationId": "cancelRental",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Rental ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "This response will be returned when the updated a rental resource"
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the rental to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when rental isn`t eligible for picked up",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EntityBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e1ecb723-6f8c-4ee6-86f6-64af13a77e8f"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-05-09 00:42:55.136515"
          }
        }
      },
      "UpdatedAt": {
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "example": "2024-05-09 13:42:55.136515"
          }
        }
      },
      "Account": {
        "required": ["name", "email", "password", "driverLicense"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "example": "email@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@123"
          },
          "driverLicense": {
            "type": "string",
            "example": "5304286925"
          }
        }
      },
      "AccountResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Jonh"
              },
              "email": {
                "type": "string",
                "example": "email@email.com"
              },
              "driverLicense": {
                "type": "string",
                "example": "5304286925"
              },
              "avatarUrl": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          }
        ]
      },
      "AccountWithAvatarResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/AccountResponse" },
          {
            "type": "object",
            "properties": {
              "avatarUrl": {
                "type": "string",
                "example": "http://localhost:3333/avatar/6aacae7a79539950-ts-2.png"
              },
              "isAdmin": {
                "type": "boolean",
                "example": false
              }
            }
          },
          { "$ref": "#/components/schemas/EntityBase" }
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email+1@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@12345"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVtYWlsQGVtYWlsLmNvbSIsImlhdCI6MTcyNzIyOTYyMiwiZXhwIjoxNzI5ODIxNjIyLCJzdWIiOiI0ZTc1NjcwYS1lZTE1LTRhMzMtYWNlZC1jNWM0N2E4ZTRiNjYifQ.Ym2Gll1Xttz6CZD0iOKJKo1WDCZ_R0PBLY4jbSlFABA"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVtYWlsKzFAZW1haWwuY29tIiwiaWF0IjoxNzE1MzQzOTI0LCJleHAiOjE3MTc5MzU5MjQsInN1YiI6IjY1ZTE3MTg0LTQ0ZTgtNDEwMS1hYTEzLTI2ZjM0MTJmMmQ3NiJ9.nFVh7uBLzIdpvJDxgt0uq5ooiurcFSTYi7jzeCyAn7A"
          }
        }
      },
      "SessionResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MTUzNDM5MjQsImV4cCI6MTcxNTM0NTcyNCwic3ViIjoiNjVlMTcxODQtNDRlOC00MTAxLWFhMTMtMjZmMzQxMmYyZDc2In0.NlSLdGPuff8i1Clwq_n-o9jLl2N2c6Ot8iozFLWB37c"
              },
              "user": {
                "allOf": [
                  { "$ref": "#/components/schemas/AccountWithAvatarResponse" },
                  {
                    "type": "object",
                    "properties": {
                      "isAdmin": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/RefreshTokenResponse"
          }
        ]
      },
      "ForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email+1@email.com"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "pass@12345"
          }
        }
      },
      "UploadImages": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "UploadAvatar": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UploadCSV": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Category": {
        "required": ["name", "description", "type"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Hatch"
          },
          "description": {
            "type": "string",
            "example": "Compact car category for travel"
          },
          "type": {
            "type": "string",
            "example": "hatch"
          }
        }
      },
      "CategoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "ba1d4a61-f635-4104-9167-4f3cb970d87a"
              },
              "createdAt": {
                "type": "string",
                "example": "2024-05-09 00:42:55.136515"
              }
            }
          }
        ]
      },
      "CategoryListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponse"
            }
          },
          "total": {
            "type": "number",
            "example": 4
          },
          "totalPages": {
            "type": "number",
            "example": 1
          }
        }
      },
      "Specification": {
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Manual transmission"
          },
          "description": {
            "type": "string",
            "example": "system composed of gears manually operated by the driver"
          }
        }
      },
      "SpecificationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Specification"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "ba1d4a61-f635-4104-9167-4f3cb970d87a"
              },
              "createdAt": {
                "type": "string",
                "example": "2024-05-09 00:42:55.136515"
              }
            }
          }
        ],
        "example": {
          "id": "ba1d4a61-f635-4104-9167-4f3cb970d87a",
          "name": "High Performance Engine",
          "description": "A powerful engine providing high horsepower",
          "createdAt": "2024-05-09T00:42:55.136Z"
        }
      },
      "SpecificationListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificationResponse"
            }
          },
          "total": {
            "type": "number",
            "example": 4
          },
          "totalPages": {
            "type": "number",
            "example": 1
          }
        }
      },
      "Car": {
        "required": [
          "name",
          "brand",
          "description",
          "dailyRate",
          "licensePlate",
          "fineAmount",
          "categoryId",
          "specifications",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mustang GT 500"
          },
          "brand": {
            "type": "string",
            "example": "Ford"
          },
          "description": {
            "type": "string",
            "example": "advanced performance sports car"
          },
          "dailyRate": {
            "type": "number",
            "example": 600
          },
          "licensePlate": {
            "type": "string",
            "example": "EFG-5678"
          },
          "fineAmount": {
            "type": "number",
            "example": 600
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "example": "2214ae85-9c94-4b02-8b80-4d04eb07c53f"
          },
          "specifications": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "ba1d4a61-f635-4104-9167-4f3cb970d87a"
            }
          },
          "status": {
            "type": "string",
            "enum": ["AVAILABLE", "RENTED"],
            "example": "AVAILABLE"
          }
        }
      },
      "CarResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Car"
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "type": "object",
            "properties": {
              "specifications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpecificationResponse"
                }
              }
            }
          }
        ]
      },
      "CarEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CarResponse"
          },
          {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/CarImages" }
              },
              "category": {
                "type": "object",
                "$ref": "#/components/schemas/CategoryResponse"
              }
            }
          }
        ]
      },
      "CarImages": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0b57f64e-5391-4803-817b-1fa4cfc60f72"
          },
          "imageName": {
            "type": "string",
            "example": "7f6de17fb968c47a-ts_1.png"
          }
        }
      },
      "CategoriesModelsProperties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "6102a9ee-e29c-45b5-bff5-b3cb2881a092"
          },
          "name": {
            "type": "string",
            "example": "Sport"
          },
          "type": {
            "type": "string",
            "example": "sport"
          }
        }
      },
      "CarsModelsProperties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "uuid",
            "example": "a97806bc-e20e-4daf-a3f1-03061eb31072"
          },
          "licensePlate": {
            "type": "string",
            "example": "EFG-5678"
          },
          "status": {
            "type": "string",
            "enum": ["AVAILABLE", "RENTED"],
            "example": "AVAILABLE"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarImages"
            }
          },
          "specifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecificationResponse"
            }
          }
        }
      },
      "Model": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mustang GT 500"
          },
          "brand": {
            "type": "string",
            "example": "Ford"
          },
          "dailyRate": {
            "type": "number",
            "example": 600
          },

          "fineAmount": {
            "type": "number",
            "example": 600
          },
          "total": {
            "type": "number",
            "example": 1
          },
          "totalAvailable": {
            "type": "number",
            "example": 1
          }
        }
      },
      "DetailedModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Model"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "example": "advanced performance sports car"
              },
              "specifications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpecificationResponse"
                }
              },
              "images": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CarImages"
                }
              }
            }
          }
        ]
      },
      "ModelsWithCarsProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Model"
          },
          {
            "type": "object",
            "properties": {
              "cars": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CarsModelsProperties"
                }
              }
            }
          }
        ]
      },
      "CategoriesWithModelsListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoriesModelsProperties"
          },
          {
            "type": "object",
            "properties": {
              "models": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DetailedModel"
                }
              },
              "available": {
                "type": "boolean",
                "example": "true"
              }
            }
          }
        ]
      },
      "CarsGroupedByCategoryListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoriesModelsProperties"
          },
          {
            "type": "object",
            "properties": {
              "models": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModelsWithCarsProperties"
                }
              }
            }
          }
        ]
      },
      "ProcessableRentalEntityProprieties": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "65e17184-44e8-4101-aa13-26f3412f2d76"
          },
          "total": {
            "type": "number",
            "example": 1800
          },
          "status": {
            "type": "string",
            "enum": [
              "CONFIRMED",
              "CANCELLED",
              "CLOSED",
              "PICKED_UP",
              "OVERDUE"
            ],
            "example": "CONFIRMED"
          }
        }
      },
      "Rental": {
        "required": ["startDate", "expectedReturnDate", "carId"],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "example": "2024-05-26 08:00:00"
          },
          "expectedReturnDate": {
            "type": "string",
            "example": "2024-05-29 10:00:00"
          },
          "carId": {
            "type": "string",
            "format": "uuid",
            "example": "5141cc5d-2a5d-4aeb-9353-ac274e02e0c4"
          }
        }
      },
      "RentalResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Rental"
          },
          {
            "$ref": "#/components/schemas/ProcessableRentalEntityProprieties"
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        ]
      },
      "RentalsListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rental"
                },
                {
                  "$ref": "#/components/schemas/ProcessableRentalEntityProprieties"
                },
                {
                  "$ref": "#/components/schemas/EntityBase"
                },
                {
                  "$ref": "#/components/schemas/UpdatedAt"
                },
                {
                  "type": "object",
                  "properties": {
                    "car": {
                      "$ref": "#/components/schemas/CarResponse"
                    },
                    "endDate": {
                      "type": "string",
                      "example": "2024-10-02T17:23:02.591Z"
                    }
                  }
                }
              ]
            }
          },
          "total": {
            "type": "number",
            "example": 4
          },
          "totalPages": {
            "type": "number",
            "example": 1
          }
        }
      },
      "DetailRentalResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "7f83aa58-e1fc-4de5-b2b0-e3584acbd84f"
              },
              "withdrawal": {
                "type": "string",
                "example": "2024-09-23T11:00:00.000Z"
              },
              "devolution": {
                "type": "number",
                "example": "2024-09-24T13:00:00.000Z"
              },
              "status": {
                "type": "string",
                "example": "CONFIRMED"
              },
              "offer": {
                "type": "object",
                "properties": {
                  "dailies": {
                    "type": "integer",
                    "example": 1
                  },
                  "total": {
                    "type": "number",
                    "example": 420
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "car": {
                "type": "object",
                "$ref": "#/components/schemas/CarEntity"
              }
            }
          }
        ]
      },
      "MeRentalsListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Rental"
          },
          {
            "$ref": "#/components/schemas/ProcessableRentalEntityProprieties"
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          {
            "type": "object",
            "properties": {
              "car": {
                "$ref": "#/components/schemas/CarResponse"
              },
              "endDate": {
                "type": "string",
                "example": "2024-10-02T17:23:02.591Z"
              }
            }
          }
        ]
      },
      "UpdateRental": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "example": "2024-05-26 08:00:00"
          },
          "expectReturnDate": {
            "type": "string",
            "example": "2024-05-29 10:00:00"
          },
          "carId": {
            "type": "string",
            "format": "uuid",
            "example": "5141cc5d-2a5d-4aeb-9353-ac274e02e0c4"
          }
        }
      },
      "UpdateRentalResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Rental"
          },
          {
            "$ref": "#/components/schemas/ProcessableRentalEntityProprieties"
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          {
            "type": "object",
            "properties": {
              "car": {
                "type": "object",
                "$ref": "#/components/schemas/CarEntity"
              },
              "endDate": {
                "type": "string",
                "example": null
              }
            }
          }
        ]
      },
      "DevolutionRentalResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Rental"
          },
          {
            "$ref": "#/components/schemas/ProcessableRentalEntityProprieties"
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          },
          {
            "type": "object",
            "properties": {
              "car": {
                "$ref": "#/components/schemas/CarEntity"
              },
              "endDate": {
                "type": "string",
                "example": "2024-10-02T17:23:02.591Z"
              }
            }
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "The \"property (example)\" parameter is missing in request body"
            }
          }
        ]
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "token is missing from the request headers"
            }
          }
        ]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "Car not found"
            }
          }
        ]
      },
      "ConflictError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "Entity resource already exists"
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "You can’t create an resource on a past date"
            }
          }
        ]
      },
      "FailedDependencyError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "Missing environment variables for JWT configuration"
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "example": {
              "status": "error",
              "message": "Internal Server Error"
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
